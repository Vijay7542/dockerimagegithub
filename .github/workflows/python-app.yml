# .github/workflows/flask-cicd.yml
name: Flask App CI/CD Pipeline

# Trigger the pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Environment variables
env:
  PYTHON_VERSION: '3.9'
  FLASK_APP: app.py
  FLASK_ENV: production

jobs:
  # JOB 1: BUILD AND TEST
  test:
    runs-on: ubuntu-latest
    
    # Services (if you need database for testing)
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Step 2: Setup Python
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
    
    # Step 4: Code quality checks
    - name: Code formatting check (Black)
      run: black --check .
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    # Step 5: Run tests
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        FLASK_ENV: testing
    
    # Step 6: Upload coverage reports
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    # Step 7: Security scan
    - name: Run security scan
      run: |
        pip install safety bandit
        safety check
        bandit -r . -x tests/
  
  # JOB 2: BUILD DOCKER IMAGE
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: your-dockerhub-username/flask-app
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # JOB 3: DEPLOY TO STAGING
  deploy-staging:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here
        # Example: SSH to staging server and pull new image
        
    - name: Run staging smoke tests
      run: |
        echo "Running smoke tests on staging"
        # Add smoke test commands
        sleep 30  # Wait for deployment to complete
        curl -f https://staging.yourapp.com/health || exit 1

  # JOB 4: DEPLOY TO PRODUCTION
  deploy-production:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Production deployment commands
        # Example: Deploy to AWS, Heroku, or your server
        
    - name: Post-deployment health check
      run: |
        echo "Checking production health"
        for i in {1..10}; do
          if curl -f https://yourapp.com/health; then
            echo "‚úÖ Health check passed"
            break
          else
            echo "‚ùå Health check failed, attempt $i"
            sleep 30
          fi
        done
    
    - name: Notify team
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          üöÄ Production deployment ${{ job.status }}
          üìù Commit: ${{ github.event.head_commit.message }}
          üë§ Author: ${{ github.actor }}
          üîó URL: https://yourapp.com
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # JOB 5: INTEGRATION TESTS (Optional)
  integration-tests:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install test dependencies
      run: |
        pip install requests pytest
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
      env:
        TEST_URL: https://staging.yourapp.com
